syntax = "proto3";

// {{{1 Request

// Generic container type for messages sent from client to server.
message SunneedRequest {
    oneof message_type {
        RegisterClientRequest register_client = 1;
        UnregisterClientRequest unregister_client = 2;
        OpenFileRequest open_file = 3;
        WriteRequest write = 4;
	SocketRequest socket = 5;
	ConnectRequest connect = 6;
	SendRequest send = 7;
    }
}

message RegisterClientRequest {
    string name = 1;
}

message UnregisterClientRequest {}

message OpenFileRequest {
    string path = 1;
    int32 flags = 2;
}

message WriteRequest {
    string dummy_path = 1;
    bytes data = 2; 
}

message SocketRequest {
    int32 domain = 1;
    int32 type = 2;
    int32 protocol = 3;
}

message ConnectRequest {
    int32 port = 1;
    string address = 2;
    int32 addrlen = 3;
    int32 sockfd = 4;
}

message SendRequest {
    int32 sockfd = 1;
    bytes data = 2;
    int32 flags = 3;
}



// {{{1 Response

// Generic container type for messages sent from server to client.
message SunneedResponse {
    int32 status = 1;
    oneof message_type {
        GenericResponse generic = 2;
        DeviceResponse device = 3;
        OpenFileResponse open_file = 4;
        RegisterClientResponse register_client = 5;
        WriteResponse call_write = 6;
	SocketResponse socket = 7;
    }
}

message RegisterClientResponse {
    repeated string locked_paths = 1;
}

message GenericResponse {
    bytes data = 1;
}

message OpenFileResponse {
    string path = 1;
}

message WriteResponse {
    // Zero if no error.
    int32 errno_value = 1;

    // This is only set from values of type `size_t`, so don't worry about data loss when converting it back from
    // uint64.
    uint64 bytes_written = 2;
}

message SocketResponse {
    //fake socket fd given back by sunneed
    int32 dummy_sockfd = 1;
}

import "device.proto";

// Dear whoever is reading this, I hope you like the word "Device"...
message DeviceResponse {

    oneof message_type {
        DeviceRandomResponse random = 1;
    }
};

// }}}

// vim: fdm=marker :
