#!/usr/bin/env bash
#
# generate-test-header: Outputs the contents of a header file which presents the user with a macro SUITES_ARRAY, which 
#  will in turn generate a static MunitSuite array containing each provided test file as a suite. The output of this
#  should be redirected to a file to be included in the main test runner file. Just call `SUITES_ARRAY(arrayname)`
#  and then pass `arrayname` as the `suites` field (the third field) in your main MunitSuite.
# Arguments: suite filenames

err() {
    echo "$(tput setaf 1)Error: $@$(tput sgr0)" >&2
}

# Generate the MunitSuite for a given test suite.
# Arguments: suite filename
suite_from_file() {
    if [[ ! -f "$1" ]]; then
        err "invalid test file '$1'"
        return 1
    fi

    local filename=$1
    local testname=${1%.c}
    local header_file=${testname}.h

    functions=$(grep -x 'MunitResult' -A1 "$filename" | grep -xv -- '--' | grep -xv 'MunitResult' | sed -r 's/^([[:alnum:]_]+)\(.*$/\1/')

    echo "// Generated from: ${filename}"

    for f in ${functions[@]}; do
        echo "MunitResult ${f}(const MunitParameter params[], void *data);"
    done

    echo "static MunitTest ${testname}_tests[] = {"
    for f in ${functions[@]}; do
        echo "{ (char*) (\"/${f}\"), $f, NULL, NULL, MUNIT_TEST_OPTION_NONE, NULL },"
    done
    echo "{ NULL, NULL, NULL, NULL, MUNIT_TEST_OPTION_NONE, NULL } };"

    echo "static const MunitSuite ${testname}_suite = { \"/$testname\", ${testname}_tests, NULL, 1, MUNIT_SUITE_OPTION_NONE };"
}

# Generate a macro that allows the user to create an array containing all of our MunitSuites.
# Arguments: suite names
suites_macro() {
    if [[ $# -lt 1 ]]; then
        err "suites required"
        return 1
    fi

    local suites=$@

    echo -n "#define SUITES_ARRAY(NAME) static MunitSuite NAME[] = {"
    for suite in ${suites[@]}; do
        echo -n "${suite}_suite,"
    done
    echo "{ NULL, NULL, NULL, 1, MUNIT_SUITE_OPTION_NONE }}"
}

main() {
    if [[ $# -lt 1 ]]; then
        err "input files required"
        return 1
    fi

    local files=${@:1}
    local suites=${files[@]/.c/}

    echo "// Generated by ${0##*/}. DO NOT EDIT THIS FILE."
    echo '#include "munit/munit.h"'

    for suite in ${suites[@]}; do
        suite_from_file "${suite}.c" || return $?
    done

    suites_macro ${suites[@]}
}

main "$@" || exit $?
